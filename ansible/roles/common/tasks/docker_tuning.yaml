---
- name: Get stat of docker lib dir
  stat:
    path: "{{ default_docker_lib_path }}"
  register: link

- name: Get all running docker containers
  command: docker ps --all --quiet
  register: containers
  ignore_errors: yes
  when: link.stat.islnk is defined and link.stat.islnk == false

- name: Stop all running docker containers
  command: "docker stop {{ item }}"
  with_items: "{{ containers.stdout_lines }}"
  when: link.stat.islnk is defined and link.stat.islnk == false

- name: Stop docker service
  service:
    name: docker
    state: stopped
  when: link.stat.islnk is defined and link.stat.islnk == false

- name: Create docker lib dir
  file:
    path: "{{ default_docker_lib_path }}"
    state: directory
  when: link.stat.islnk is defined and link.stat.islnk == false

- name: Delete docker lib symbolic link dir
  file:
    path: "{{ docker_data_path }}"
    state: absent
  when: link.stat.islnk is defined and link.stat.islnk == false

- name: Create docker lib symbolic link dir
  file:
    path: "{{ docker_data_path }}"
    state: directory
  when: link.stat.islnk is defined and link.stat.islnk == false

- name: Synchronize docker lib dir to docker lib symbolic link dir
  synchronize:
    src: "{{ default_docker_lib_path }}"
    dest: "{{ docker_data_path }}/.."
    delete: yes
    recursive: yes
  delegate_to: "{{ inventory_hostname }}"
  when: link.stat.islnk is defined and link.stat.islnk == false

- name: Get content of docker lib dir
  command: "ls -1 {{ default_docker_lib_path }}"
  register: contents
  when: link.stat.islnk is defined and link.stat.islnk == false

- name: Delete content of docker lib dir
  file:
    path: "{{ default_docker_lib_path }}/{{ item }}"
    state: absent
  with_items: "{{ contents.stdout_lines }}"
  when: link.stat.islnk is defined and link.stat.islnk == false

- name: Create symbolic link from docker lib dir to external drive
  file:
    src: "{{ docker_data_path }}"
    dest: "{{ default_docker_lib_path }}"
    state: link
    force: yes

- name: Restart docker service
  service:
    name: docker
    state: restarted
    enabled: yes
  when: link.stat.islnk is defined and link.stat.islnk == false

- name: Start all privious running docker containers
  command: "docker start {{ item }}"
  with_items: "{{ containers.stdout_lines }}"
  when: link.stat.islnk is defined and link.stat.islnk == false
